"""
Methods for interacting with mtg
Author: Christian Fournier
License: CeCILL
Date: 23/06/09
"""

import label

from openalea.mtg import *
try:
    from openalea.mtg.traversal import *
except:
    pass

from numpy import array

from openalea.plantgl.all import Tesselator,cross,Vector3,normSquared

from itertools import groupby, izip
from cStringIO import StringIO


def _line(ind, pts, label):
    s = "p 1 %s 3 %s"%(str(label), ' '.join('%.6f'%x for i in ind for x in pts[i]))
    return s

def _areaSquare(ind,pts):
    sommets = [Vector3(pts[i]) for i in ind] 
    pvec = cross(sommets[1] - sommets[0],sommets[2] - sommets[0])
    return normSquared(pvec)

def to_canestra(g,OptId = "optical_specie",Opak = "transparency",Geometry = "geometry",defopt = 1,defopak = 0,epsilon=1e-5):
    """
    Build canestra file representation of g and a list of mtg node id triangles belongs to.
    OptId and Opak are the name of mtg properties to use.

    """
    output = []

    epsilon2 = epsilon**2

    tessel = Tesselator()

    opt_id = g.property(OptId)
    opak = g.property(Opak)
    geometry = g.property(Geometry)

    begin = '# File generated by OpenAlea.Caribu.mtg program'
    
    output.append(begin+'\n')

    mtg_id = []
    plant_index = 0
    
    for root_elt in g.roots(scale=g.max_scale()):
        plant_index += 1
        elt_index = 0
        for vid in pre_order(g, root_elt):
            geom = geometry.get(vid)
            if not geom:
                continue
            elt_index += 1

            if isinstance(geom, list):
                itgeom = geom
            else:
                itgeom = [geom]

            for shape in itgeom:
                shape.apply(tessel)
                mesh = tessel.triangulation
                pts = array(mesh.pointList, ndmin=2)
                indices = array(mesh.indexList, ndmin=2)
                _label = label.Label()
                _label.plant_id = plant_index
                _label.optical_id = opt_id.get(vid,defopt)
                _label.leaf_id = opak.get(vid,defopak)
                _label.elt_id = elt_index
                l = (_line(ind, pts, _label)+'\n' for ind in indices if  _areaSquare(ind,pts) > epsilon2)
                output.extend(l)
                mtg_id.extend([vid]*len(indices))

    output.append('\n')

    contents = ''.join(output)

    return mtg_id, contents


def agregate(values,indices,fun = sum):
    ag = {}
    for key,group in groupby(sorted(izip(indices,values),key=lambda x: x[0]),lambda x : x[0]) :
        ag[key] = fun([elt[1] for elt in group])
    return ag


def updateMTG(g,canout,tri_mtgid,prefix="Caribu_") :
    if len(canout[canout.keys()[0]]) != len(tri_mtgid):
        print "Warning : missing triangles ! ! mtg not updated"
        return g
    for k in ['Eabs','Area','EiInf','EiSup'] :
        if not g.properties().has_key(prefix+k):
            g.add_property(prefix+k)
        g.property(prefix+k).update(agregate(canout[k],tri_mtgid))
    return g



